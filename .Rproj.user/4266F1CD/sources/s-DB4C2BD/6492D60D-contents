if(!require('safer')) install.packages('safer', repos='http://cran.us.r-project.org', dependencies = T )
if(!require('rjson')) install.packages('rjson', repos='http://cran.us.r-project.org', dependencies = T )

library(bs4Dash)
library(DBI)
library(RMySQL)
library(plyr)
library(dplyr)
library(shiny)
library(DT)
library(glue)
library(expss)
library(lubridate)
library(shinyWidgets)
library(readxl)
library(shinyjs)
library(writexl)
library(stringr)
library(shinyTime)
library(jsonlite)
library(shinybusy)
#library(tidyverse)
library(gtools)
library(tidyr)

#función

  source(file = glue("{getwd()}/config.R"), local=TRUE)
  '%ni%'=Negate('%in%')
  
  {
  get_query = function(db, consulta){
    mydb = {try_default(dbConnect(
      RMySQL::MySQL(),
      host = eval(as.name(paste0('host_',db))),
      user = eval(as.name(paste0('user_',db))),
      password = eval(as.name(paste0('password_',db)))
    ),1,quiet = T)}
    if (toupper(Sys.info()[1][[1]]) != 'WINDOWS' ){
      dbGetQuery(mydb,"set names utf8")
    }
    consulta <- try_default(dbGetQuery(mydb,consulta),1, quiet = T)
    try(dbDisconnect(mydb),silent = T)
    return(consulta)}
  
  qry_mc <- function(consulta){
    
    conn <- try_default(dbConnect(
      drv = RMySQL::MySQL(),
      host =host_shiny,
      username = user_shiny,
      password = password_shiny),1,quiet = T)
    if (toupper(Sys.info()[1][[1]]) != 'WINDOWS' ){
      dbGetQuery(conn,"set names utf8")
    }
    #dbGetQuery(conn,"set names utf8")
    consulta = try_default(dbGetQuery(conn,consulta),data.frame(Error = 'Fallo BD'), quiet = T)
    try(dbDisconnect(conn),silent = T)
    return(consulta)
  }
  extract_schedule=function(schedule){
    result=data.frame()
    for(i in 1:nrow(schedule)){
      temp=cbind(w_id=schedule$warehouse_id[i],case="current",jsonlite::fromJSON(schedule$current_day[i]))
      result=rbind(temp,result)
    }
    result$apertura=paste0(result$apertura,":00")
    result$cierre=paste0(result$cierre,":00")
    c1=dplyr::select(result,w_id,case,day,apertura)
    c1=cbind("open",c1)
    c2=dplyr::select(result,w_id,case,day,cierre)
    c2=cbind("close",c2)
    colnames(c1)=c("type","w_id","day_type","day","hour")
    colnames(c2)=c("type","w_id","day_type","day","hour")
    result=rbind(c1,c2)
    
    result$hour=as.POSIXct(as.character(paste0(format(with_tz(Sys.time(),tzone = 'America/Bogota'),format = '%F')," ",result$hour)))
    
    current_day=result
    result=data.frame()
    
    for(i in 1:nrow(schedule)){
      temp=cbind(w_id=schedule$warehouse_id[i],case="next_day",jsonlite::fromJSON(schedule$next_day[i]))
      result=rbind(temp,result)
    }
    result$apertura=paste0(result$apertura,":00")
    result$cierre=paste0(result$cierre,":00")
    c1=dplyr::select(result,w_id,case,day,apertura)
    c1=cbind("open",c1)
    c2=dplyr::select(result,w_id,case,day,cierre)
    c2=cbind("close",c2)
    colnames(c1)=c("type","w_id","day_type","day","hour")
    colnames(c2)=c("type","w_id","day_type","day","hour")
    result=rbind(c1,c2)
    
    
    result$hour=as.POSIXct(as.character(paste0(format(with_tz(Sys.time()+86400,tzone = 'America/Bogota'),format = '%F')," ",result$hour)))
    result=result[which(result$type=="open"),]
    next_day=result
    
    temp=rbind(current_day,next_day)
    temp$express_attention=vlookup(temp$w_id,schedule,4,1)
    schedule=temp
    action_group=aggregate(schedule$hour,list(schedule$type,schedule$hour),length)
    colnames(action_group)=c("type","timestamp","quantity")
    action_group$timestamp=as.POSIXct(action_group$timestamp)
    action_group=action_group[order(action_group$type),]
    result=list()
    result[[1]]=schedule
    result[[2]]=action_group
    
    return(result)
  }
  
  json='{"Lunes": [{ "apertura":"8:00", "cierre":"16:30","day":1}], "Martes":[{ "apertura":"8:00", "cierre":"16:30","day":2}], "Miercoles":[{ "apertura":"8:00", "cierre":"16:30","day":3}], "Jueves":[{ "apertura":"8:00", "cierre":"16:30","day":4}], "Viernes":[{ "apertura":"8:00", "cierre":"16:30","day":5}], "Sabado":[{ "apertura":"8:00", "cierre":"16:30","day":6}], "Domingo":[{ "apertura":"8:00", "cierre":"16:30","day":0}]}'
  
  stores={"select *  from marketplace.stores_schedule sc"}
  day_week={data.frame(Dia=c("Domingo","Lunes","Martes","Miercoles","Jueves","Viernes","Sabado","Hoy"),
                       id=c(0,1,2,3,4,5,6,7),other_id=c(1,2,3,4,5,6,7,0))}
  warehouses={"select 
  s.name,
  w.warehouse
  from merqueopro.zones z
  inner join merqueopro.warehouses w on w.id=z.warehouse_id 
  inner join merqueopro.stores s on s.id=z.store_id 
  where s.status =1
  and w.status=1 
  and z.status=1
  and s.type='Marketplace'
  and s.name like '@store'
  group by w.id
  order by s.type,s.name,w.id"}
  
  resumen1={"SELECT 
              s.store_id,
              s.store,
              s.warehouse_id,
              s.warehouse
              FROM marketplace.stores_schedule s"}
  stores=get_query("shiny",stores)
  store_table=function(stores_schedule){
    
    temp=lapply(stores_schedule$schedule,jsonlite::fromJSON)
    result=data.frame()
    for(i in 1:length(temp)){
      df=do.call(rbind.data.frame, temp[[i]])
      df=df[,-ncol(df)]
      temp2=apply(df, 1,paste,collapse=" - ")
      temp2=as.data.frame(t(temp2))
      result=rbind(result,temp2)
    }
    result=cbind("Bodega"=stores_schedule$warehouse,result)
    
    return(result)
  }
  add_buttons=function(stores_schedule){
    shinyInput <- function(FUN, len, id, ...) {
      input <- character(len)
      
      input <- as.character(FUN(paste0(id, len), ...))
      
      input
    }
    stores_schedule=data.frame(stores_schedule,"Editar"=NA,"Eliminar"=NA)
    stores_schedule[is.na(stores_schedule)]=0
    
    for(i in 1:nrow(stores_schedule)){
      stores_schedule$Editar[i] = shinyInput(actionButton,i, 'button_', label = "Editar", 
                                             style="padding:8px; font-size:90%;color: #fff; background-color: #87ae7c; border-color: #87ae7c"
                                             ,onclick = 'Shiny.setInputValue(\"edit_info\", this.id, {priority: \"event\"})' )
      
      stores_schedule$Eliminar[i] = shinyInput(actionButton,i, 'button_', label = "Eliminar", 
                                               style="padding:8px; font-size:90%;color: #fff; background-color: #a17cae; border-color: #a17cae"
                                               ,onclick = 'Shiny.setInputValue(\"delete_info\", this.id, {priority: \"event\"})' )
      
      
    }
    
    
    
    return(stores_schedule)
  }
  add_buttons_var_cost=function(result){
    shinyInputd <- function(FUN, len, id, ...) {
      inputs <- character(len)
      for (i in seq_len(len)) {
        inputs[i] <- as.character(FUN(paste0(id, i), ...))
      }
      inputs
    }
    
    result$Modificar= shinyInputd(actionButton,nrow(result), 'button_', label = "Editar", icon=icon("check"), 
                                  style="padding:6px; font-size:85%;color: #fff; background-color: #3CB371; border-color: #3CB371"
                                  ,onclick = 'Shiny.setInputValue(\"specific_var_button_edit\", this.id, {priority: \"event\"})' )
    
    return(result)
  }
  edit_schedule=function(input,output,session,warehouse){
    
    stores_schedule=paste0("select * from marketplace.stores_schedule mps where mps.warehouse like '",warehouse,"'")
    stores_schedule=get_query("shiny",stores_schedule)
    stores_schedule=jsonlite::fromJSON(stores_schedule$schedule)
    stores_schedule=do.call(rbind.data.frame,stores_schedule)
    stores_schedule=cbind(Día=rownames(stores_schedule),stores_schedule)
    
    return(stores_schedule)
  }
  modal_edit_schedule <- function(input,output,session,warehouse_schedule,w_name){
    {
      
      warehouse_schedule=warehouse_schedule[,-ncol(warehouse_schedule)]
      
      warehouse_schedule=add_buttons_var_cost(warehouse_schedule)
      output$tbl = renderDataTable(warehouse_schedule,
                                   class = 'compact',
                                   options = list(dom='t',info=FALSE,autoWidth = FALSE,
                                                  lengthChange = TRUE,paging = FALSE,
                                                  pageLength = nrow(warehouse_schedule),scrollX = T),
                                   selection=list(mode="single", target="row"),
                                   rownames =FALSE,
                                   filter = 'none',escape = FALSE,editable = FALSE)
      
      
      
      {modalDialog(
        tags$h2(paste0("Horario: ",w_name), class = "text-center", style = "padding-top: 0;color: #D10D70;font-size: 22px; font-weight:600;"),
        dataTableOutput("tbl"),
        size = 'l',
        footer = list(
          actionButton(
            'exit_modal',
            'Regresar',
            class = "btn btn-primary",
            style = "color: white;background-color: #D10D70 !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: #D10D70"
          )
        )
      )
      }}
    
  }
  modal_delete_schedule <- function(input,output,session,w_name){
    {
      
      
      {modalDialog(
        tags$h2(paste0(w_name), class = "text-center", style = "padding-top: 0;color: #a17cae;font-size: 28px; font-weight:800;"),
        tags$h1("¿Realmente desea eliminar el registro asociado a la bodega?", class = "text-center", style = "padding-top: 0;color: black;font-size: 26px; font-weight:600;"),
        size = 'm',
        footer = list(
          actionButton(
            'delete_warehouse',
            'Borrar',
            class = "btn btn-primary",
            style = "color: white;background-color: #a17cae !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: #a17cae"
          ),
          actionButton(
            'exit_delete_modal',
            'Cancelar',
            class = "btn btn-primary",
            style = "color: black;background-color: white !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: black"
          )
        )
      )
      }}
    
  }
  modal_add_warehouse <- function(input,output,session){
    {
      
      
      {modalDialog(
        tags$h2("¿Deseas incluir la(s) bodega(s) en la herramienta?", class = "text-center", style = "padding-top: 0;color: #a17cae;font-size: 24px; font-weight:800;"),
        tags$h1(paste(input$warehouse_add,collapse=","), class = "text-center", style = "padding-top: 0;color: black;font-size: 22px; font-weight:600;"),
        size = 'l',
        footer = list(
          actionButton(
            'add_warehouse_c',
            'Agregar',
            class = "btn btn-primary",
            style = "color: white;background-color: #a17cae !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: #a17cae"
          ),
          actionButton(
            'exit_delete_modal',
            'Cancelar',
            class = "btn btn-primary",
            style = "color: black;background-color: white !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: black"
          )
        )
      )
      }}
    
  }
  modal_edit_schedule_warehouse<-function(input,output,session,selectedRow_day,warehouse_schedule){
    {
      
      {modalDialog(easyClose = TRUE,
                   tags$h2(warehouse_schedule[selectedRow_day,"dia"], class = "text-center", style = "padding-top: 0;color: #D10D70;font-size: 26px; font-weight:600;"),
                   fluidRow(
                     column(4,
                            timeInput("open_hour", "Apertura", minute.steps = 1)),
                     column(4,
                            timeInput("close_hour", "Cierre", minute.steps = 1)),
                     column(4,
                            br(),
                            br(),
                            prettyCheckbox(
                              inputId = "close_w", label = "Cerrar Bodega", icon = icon("close")
                            )
                     )
                   ),
                   
                   size = 'm',
                   footer = list(
                     actionButton(
                       'save_back',
                       'Guardar',
                       class = "btn btn-primary",
                       style = "color: white;background-color: #D10D70 !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: #D10D70"
                     )
                   )
      )
      }}
    
  }
  modal_edit_slot<-function(input,output){
    
    slot_edit=paste0("select * from marketplace.stores_schedule ssc where ssc.warehouse_id like '",warehouse_id,"'")
    slot_edit=get_query("shiny",slot_edit)
    name=slot_edit$warehouse
    slot_edit=jsonlite::fromJSON(slot_edit$slots)
    output$render_ui_1=renderUI({
      fluidRow(
        lapply(1:4, function(i) {
          
          prettyToggle(
            inputId = paste0('slots_',i),  label_on = names(slot_edit[i]),
            label_off = names(slot_edit[i]), outline = TRUE,
            plain = TRUE,
            value=if_else(slot_edit[[i]]==1,T,F),
            icon_on = icon("check"),
            icon_off = icon("remove")
          )

          
        })
      )
    })
    output$render_ui_2=renderUI({
      fluidRow(
        lapply(5:length(slot_edit), function(i) {
          prettyToggle(
            inputId = paste0('slots_',i),  label_on = names(slot_edit[i]),
            label_off = names(slot_edit[i]), outline = TRUE,
            plain = TRUE,
            value=if_else(slot_edit[[i]]==1,T,F),
            icon_on = icon("check"),
            icon_off = icon("remove")
          )
          
        })
      )
    })
    
    modalDialog(
      tags$h2(paste0("Edite los Slots de: ",name), class = "text-center", style = "padding-top: 0;color:black;font-size: 26px; font-weight:600;"),
      br(),
      fluidRow(
        column(3,
               br(),
        ),
        column(2,
               uiOutput("render_ui_1")
        ),
        column(2,
               br(),
        ),
        column(2,
               uiOutput("render_ui_2")
        )
      ),
      fluidRow(
        column(3,
               br()),
        column(
          width = 6,
          br(),

          actionButton(
            'exit_modal_dos',
            'Regresar',
            class = "btn btn-primary",
            style = "color: white;background-color: #D10D70 !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: #D10D70"
          ),
          actionButton(
            'save_slot',
            'Guardar',
            class = "btn btn-primary",
            style = "color: white;background-color: #D10D70 !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: #D10D70"
          ),
          
        )),
      footer = list(
        tags$h2("", class = "text-center", style = "padding-top: 0;color:black;font-size: 18px; font-weight:400;")
      )
    )
  }
  modal_usuario9=function(input,output){
    modalDialog(
      tags$h2("Modificado Con Exito.", class = "text-center", style = "padding-top: 0;color:black;font-size: 26px; font-weight:600;"),
      
      size = 'm',
      footer = list(
        
        actionButton(
          'exit_modal_dos',
          'Regresar',
          class = "btn btn-primary",
          style = "color: black;background-color: white !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: black"
        )
        
        
      )
      
      
    )
  }

  }
  
  ui = {bs4DashPage(
    #old_school = F,
    #navbar = bs4DashNavbar(),
    dashboardHeader(
      title = ""
    ),
    sidebar = bs4DashSidebar(
      skin = "light",
      bs4SidebarMenu(
        bs4SidebarHeader("Planning Slots"),
        bs4SidebarMenuItem(
          "Horario de Tiendas",
          tabName = "opc2"
        ),
        bs4SidebarMenuItem(
          "Agregar Tiendas",
          tabName = "opc3"
        ),
        bs4SidebarMenu(
          bs4SidebarMenuItem(
            "Horario de Slots",
            tabName = "opc4"
          )
        )
      )
    ),
    
    footer = bs4DashFooter(),
    title = "Slots Marketplace",
    body = bs4DashBody(
      bs4TabItems(
        
        bs4TabItem(
          tabName = "opc2",
          h2("Modificación de Horarios"),
          fluidRow(
            column(2,
                   selectInput("store", "seleccione tienda:",
                               unique(stores$store))
            )
          ),
          dataTableOutput("store_t")
          
        ),
        bs4TabItem(
          tabName = "opc3",
          fluidRow(
            column(1,
                   actionButton(
                     'create_warehouse',
                     'Inicio',
                     class = "btn btn-primary",
                     style = "color: white;background-color: #a17cae !important; border: 2;
            font-weight: bold; margin:20px; padding: 10px;border-color: #a17cae"
                   )
            ),
            column(2,
                   uiOutput("add_store"),
                   uiOutput("add_warehouse"),
                   uiOutput("save_warehouse")
            )
          ),
          
        ),
        bs4TabItem(
          tabName = "opc4",
          h2("Modificación de Slots"),
          fluidRow(
            column(2,
                   selectInput("store_j", "seleccione tienda:",
                               unique(stores$store))
            )
          ),
          dataTableOutput("store_t_j")
          
        )
      )
    )
  )}
  



server = function(input, output,session){
  
 
  
  #Horario de Tiendas
  {
    row_position=reactiveVal()
    df=reactiveValues(data = NULL)
    row_position_w=reactiveVal()
    row_position_d=reactiveVal()
    schedule_w=reactiveValues(data = NULL)
    options(shiny.maxRequestSize=30*1024^2)
    
    w_s<-eventReactive(input$store,{
      stores_schedule=get_query("shiny","select * from marketplace.stores_schedule")
      stores_schedule=stores_schedule[which(stores_schedule$store_id==vlookup(input$store,stores_schedule,"store_id","store")),]
      stores_schedule=store_table(stores_schedule)
      stores_schedule=add_buttons(stores_schedule)
      df$data=stores_schedule
    })
    
    output$store_t <- DT::renderDataTable({
      DT::datatable(w_s(),
                    class = 'cell-border stripe',
                    rownames=FALSE,
                    extensions = list("Scroller"),
                    options=list(dom='t',info=FALSE,autoWidth = FALSE,ordering=F,columnDefs = list(list(className = 'dt-center', targets = 0:4)),scrollX = FALSE, sScrollY = '75vh', scrollCollapse = TRUE, 
                                 lengthChange = FALSE,paging = FALSE),
                    selection=list(mode="single", target="row"),
                    filter = 'top',escape = FALSE)%>%
        formatStyle(columns = c(2:ncol(w_s())), fontSize = '100%')%>%
        formatStyle(1,color = 'black', backgroundColor = '#EED4F5',fontSize = '120%', fontWeight = 'bold')%>%
        formatStyle(ncol(w_s()),color = 'black',fontSize = '120%')%>%
        formatStyle(
          columns =c(2:ncol(w_s())),
          color =styleEqual(c("5:00 - 5:00"), 
                            c("#D3D3D3")),
          backgroundColor = styleEqual(c("5:00 - 5:00"), 
                                       c("#D3D3D3"))
        )
      
      
    })    
    
    
    observeEvent(input$create_warehouse,{
      disable("create_warehouse")
      
      warehouses_add={"select w.status,z.status,s.id store_id,s.name store,w.id warehouse_id,w.warehouse from merqueopro.zones z
inner join merqueopro.warehouses w on w.id=z.warehouse_id 
inner join merqueopro.stores s on s.id=z.store_id 
inner join merqueopro.cities c on c.id=s.city_id
inner join merqueopro.countries ct on ct.id=c.country_id
where s.status =1
and w.status=1 
#and z.status=1
and s.type='Marketplace'
group by w.id
order by s.type,s.name,w.id"}
      
      showModal(modalDialog("Procesando!!",
                            easyClose = T,
                            footer = NULL))
      
      warehouses_add=get_query("prod",warehouses_add)
      stores=get_query("shiny","select * from marketplace.stores_schedule")
      warehouses_add=warehouses_add[which(warehouses_add$warehouse_id %ni% stores$warehouse_id),]
      warehouses_add<<-warehouses_add
      removeModal()
      
      output$add_store=renderUI({
        selectInput("store_add", "seleccione tienda",
                    unique(warehouses_add$store))
        
      })
      
      
    })#botón para reiniciar
    observeEvent(input$store_add,{
      disable("store_add")
      w_filter=as.character(warehouses_add[which(warehouses_add$store==input$store_add),"warehouse"])
      output$add_warehouse=renderUI({
        selectInput("warehouse_add",label ="seleccione Bodega(s):",choices =unique(w_filter),selected = w_filter[1],multiple = T)
      })
      
      output$save_warehouse=renderUI({
        actionButton(
          'save_warehouse_add',
          'Continuar',
          class = "btn btn-primary",
          style = "color: white;background-color: #a17cae !important; border: 2;
            font-weight: bold; margin:20px; padding: 10px;border-color: #a17cae"
        )
      })
      
    })#botón para reiniciar
    
    observeEvent(input$save_warehouse_add,{
      disable("save_warehouse_add")
      
      showModal(modal_add_warehouse(input,output,session))
    })#botón para reiniciar
    
    
    observeEvent(input$add_warehouse_c,{
      disable("add_warehouse_c")
      removeModal()
      
      showModal(modalDialog("Procesando!!",
                            easyClose = T,
                            footer = NULL))
      
      parameter_w=as.numeric(warehouses_add[which(warehouses_add$warehouse %in% input$warehouse_add),"warehouse_id"])
      
      stores=get_query("shiny","select * from marketplace.stores_schedule")
      
      parameter=which(stores$warehouse_id %in% parameter_w)
      if(length(parameter)>0){
        parameter_w=parameter_w[which(parameter_w %ni%stores$warehouse_id)]
      }
      
      warehouses_add=warehouses_add[which(warehouses_add$warehouse_id %in%parameter_w),]
      
      if(nrow(warehouses_add)>0){
        warehouses_add$schedule=json
        warehouses_add$slots='{"15 min":0,"30 min":0,"45 min":0,"60 min":0,"90 min":1,"120 min":1,"2.5 horas":1,"180 min":1,"4 horas":0}'
        for(i in 1:nrow(warehouses_add)){
          qry1=paste("INSERT INTO marketplace.stores_schedule(
            store_id,
            store,
            warehouse_id,
            warehouse,
            schedule,
            slots,
            created_at,
            updated_at)
             VALUES('",warehouses_add$store_id[i],"','",
                     warehouses_add$store[i],"','",
                     warehouses_add$warehouse_id[i],"','",
                     warehouses_add$warehouse[i],"','",
                     warehouses_add$schedule[i],"','",
                     warehouses_add$slots[i],"','",
                     Sys.time(),"','",Sys.time(),"');",sep="")
          
          
          get_query("shiny",qry1)
        }    
        
        
      }
      
      updateSelectInput(session, "store", label = "seleccione tienda:", choices = unique(stores$store),
                        selected = stores$store[1])
      
      showModal(modalDialog("Listo!!",
                            easyClose = T,
                            footer = 
                              tagList(
                                actionButton(
                                  'exit_delete_modal',
                                  'Regresar',
                                  class = "btn btn-primary",
                                  style = "color: black;background-color: white !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: black"
                                )
                              )
      )
      )
      
      shinyjs::click("store")
      w_s<-eventReactive(input$store,{
        stores_schedule=get_query("shiny","select * from marketplace.stores_schedule")
        stores_schedule=stores_schedule[which(stores_schedule$store_id==vlookup(input$store,stores_schedule,"store_id","store")),]
        stores_schedule=store_table(stores_schedule)
        stores_schedule=add_buttons(stores_schedule)
        df$data=stores_schedule
      })
      output$store_t <- DT::renderDataTable({
        DT::datatable(w_s(),
                      class = 'cell-border stripe',
                      rownames=FALSE,
                      extensions = list("Scroller"),
                      options=list(dom='t',info=FALSE,autoWidth = FALSE,ordering=F,columnDefs = list(list(className = 'dt-center', targets = 0:4)),scrollX = FALSE, sScrollY = '75vh', scrollCollapse = TRUE, 
                                   lengthChange = FALSE,paging = FALSE),
                      selection=list(mode="single", target="row"),
                      filter = 'top',escape = FALSE)%>%
          formatStyle(columns = c(2:ncol(w_s())), fontSize = '100%')%>%
          formatStyle(1,color = 'black', backgroundColor = '#EED4F5',fontSize = '120%', fontWeight = 'bold')%>%
          formatStyle(ncol(w_s()),color = 'black',fontSize = '120%')%>%
          formatStyle(
            columns =c(2:ncol(w_s())),
            color =styleEqual(c("5:00 - 5:00"), 
                              c("#D3D3D3")),
            backgroundColor = styleEqual(c("5:00 - 5:00"), 
                                         c("#D3D3D3"))
          )
        
        
      }) 
      
      
      
    })#botón para reiniciar
    
    
    observeEvent(input$edit_info,{
      disable("edit_info")
      selectedRow_day <- as.numeric(strsplit(input$edit_info, "_")[[1]][2])
      isolate(row_position_w(selectedRow_day))
      
      warehouse=isolate(df$data[selectedRow_day,"Bodega"])
      warehouse_schedule=edit_schedule(input,output,session,warehouse)
      schedule_w$data=warehouse_schedule
      showModal(modal_edit_schedule(input,output,session,schedule_w$data,warehouse))
    })#botón para reiniciar
    
    observeEvent(input$delete_info,{
      disable("delete_info")
      selectedRow <- as.numeric(strsplit(input$delete_info, "_")[[1]][2])
      
      warehouse=isolate(df$data[selectedRow,"Bodega"])
      isolate(row_position_d(warehouse))
      showModal(modal_delete_schedule(input,output,session,warehouse))
    })
    
    
    observeEvent(input$specific_var_button_edit,{
      disable("specific_var_button_edit")
      
      selectedRow_day <- as.numeric(strsplit(input$specific_var_button_edit, "_")[[1]][2])
      isolate(row_position(selectedRow_day))
      warehouse_schedule=isolate(schedule_w$data)
      showModal(modal_edit_schedule_warehouse(input,output,session,selectedRow_day,warehouse_schedule))
    })#botón para reiniciar
    
    observeEvent(input$delete_warehouse,{
      disable("delete_warehouse")
      
      stores_schedule=get_query("shiny","select * from marketplace.stores_schedule")
      warehouses=stores_schedule[which(stores_schedule$warehouse==row_position_d()),"warehouse_id"]
      qry=paste0("DELETE from marketplace.stores_schedule  WHERE marketplace.stores_schedule.warehouse_id ='",warehouses,"'")
      get_query("shiny",qry)
      
      
      
      showModal(modalDialog("Registro Borrado con éxito!!",
                            easyClose = T,
                            footer = 
                              tagList(
                                actionButton(
                                  'exit_delete_modal',
                                  'Regresar',
                                  class = "btn btn-primary",
                                  style = "color: black;background-color: white !important; border: 2;
            font-weight: bold; margin:5px; padding: 10px;border-color: black"
                                )
                              )
      ))
      
      removeModal()
      
      shinyjs::click("store")
      w_s<-eventReactive(input$store,{
        stores_schedule=get_query("shiny","select * from marketplace.stores_schedule")
        stores_schedule=stores_schedule[which(stores_schedule$store_id==vlookup(input$store,stores_schedule,"store_id","store")),]
        stores_schedule=store_table(stores_schedule)
        stores_schedule=add_buttons(stores_schedule)
        df$data=stores_schedule
      })
      output$store_t <- DT::renderDataTable({
        DT::datatable(w_s(),
                      class = 'cell-border stripe',
                      rownames=FALSE,
                      extensions = list("Scroller"),
                      options=list(dom='t',info=FALSE,autoWidth = FALSE,ordering=F,columnDefs = list(list(className = 'dt-center', targets = 0:4)),scrollX = FALSE, sScrollY = '75vh', scrollCollapse = TRUE, 
                                   lengthChange = FALSE,paging = FALSE),
                      selection=list(mode="single", target="row"),
                      filter = 'top',escape = FALSE)%>%
          formatStyle(columns = c(2:ncol(w_s())), fontSize = '100%')%>%
          formatStyle(1,color = 'black', backgroundColor = '#EED4F5',fontSize = '120%', fontWeight = 'bold')%>%
          formatStyle(ncol(w_s()),color = 'black',fontSize = '120%')%>%
          formatStyle(
            columns =c(2:ncol(w_s())),
            color =styleEqual(c("5:00 - 5:00"), 
                              c("#D3D3D3")),
            backgroundColor = styleEqual(c("5:00 - 5:00"), 
                                         c("#D3D3D3"))
          )
        
        
      }) 
      
      
    })#botón para reiniciar
    
    
    
    observeEvent(input$save_back,{
      
      w_selected_row=isolate(row_position_w())
      day = isolate(row_position())
      warehouse_seller=isolate(w_s())
      warehouse_schedule=isolate(schedule_w$data)
      
      
      if(input$close_w==TRUE){
        warehouse_schedule[day,"apertura"]="5:00"
        warehouse_schedule[day,"cierre"]="5:00"
      }else{
        if(minute(input$open_hour)=="0"){min="00"}else{min=minute(input$open_hour)}
        warehouse_schedule[day,"apertura"]=paste0(hour(input$open_hour),":",min)
        if(minute(input$close_hour)=="0"){min="00"}else{min=minute(input$close_hour)}
        warehouse_schedule[day,"cierre"]=paste0(hour(input$close_hour),":",min)
      }
      removeModal()
      show_modal_spinner(
        spin = "radar",
        color = "#DC5BBF",
        text = "Procesando..."
      )
      
      
      
      rownames(warehouse_schedule)=NULL
      
      temp=split(warehouse_schedule,warehouse_schedule$Día)
      result=list()
      
      for(i in 1:length(temp)){
        temp[[i]]=temp[[i]][,-1]
        result[[as.numeric(rownames(temp[[i]]))]]=temp[[i]]
        if(as.numeric(rownames(temp[[i]]))==7){
          names(result)[as.numeric(rownames(temp[[i]]))]="Domingo"}else{
            names(result)[as.numeric(rownames(temp[[i]]))]=as.character(vlookup(as.numeric(rownames(temp[[i]])),warehouse_schedule,"Día","day"))  
          }
      }
      
      
      warehouse_schedule=result
      string_json=toJSON(warehouse_schedule)
      
      
      warehouse=warehouse_seller[w_selected_row,"Bodega"]
      qry_update=paste0("UPDATE marketplace.stores_schedule 
    SET 
    schedule='",string_json,"'
    WHERE
    warehouse='",warehouse,"';")
      get_query("shiny",qry_update)
      warehouse_schedule=edit_schedule(input,output,session,warehouse)
      schedule_w$data=warehouse_schedule
      
      
      showModal(modal_edit_schedule(input,output,session,schedule_w$data,warehouse))
    })
    
    
    observeEvent(input$exit_delete_modal,{
      removeModal()
    })
    
    observeEvent(input$exit_modal,{
      
      w_selected_row=isolate(row_position_w())
      day = isolate(row_position())
      warehouse_seller=isolate(w_s())
      
      warehouse=warehouse_seller[w_selected_row,"Bodega"]
      
      
      removeModal()
      shinyjs::click("store")
      w_s<-eventReactive(input$store,{
        stores_schedule=get_query("shiny","select * from marketplace.stores_schedule")
        stores_schedule=stores_schedule[which(stores_schedule$store_id==vlookup(input$store,stores_schedule,"store_id","store")),]
        stores_schedule=store_table(stores_schedule)
        stores_schedule=add_buttons(stores_schedule)
        df$data=stores_schedule
      })
      output$store_t <- DT::renderDataTable({
        DT::datatable(w_s(),
                      class = 'cell-border stripe',
                      rownames=FALSE,
                      extensions = list("Scroller"),
                      options=list(dom='t',info=FALSE,autoWidth = FALSE,ordering=F,columnDefs = list(list(className = 'dt-center', targets = 0:4)),scrollX = FALSE, sScrollY = '75vh', scrollCollapse = TRUE, 
                                   lengthChange = FALSE,paging = FALSE),
                      selection=list(mode="single", target="row"),
                      filter = 'top',escape = FALSE)%>%
          formatStyle(columns = c(2:ncol(w_s())), fontSize = '100%')%>%
          formatStyle(1,color = 'black', backgroundColor = '#EED4F5',fontSize = '120%', fontWeight = 'bold')%>%
          formatStyle(ncol(w_s()),color = 'black',fontSize = '120%')%>%
          formatStyle(
            columns =c(2:ncol(w_s())),
            color =styleEqual(c("5:00 - 5:00"), 
                              c("#D3D3D3")),
            backgroundColor = styleEqual(c("5:00 - 5:00"), 
                                         c("#D3D3D3"))
          )
        
        
      })    
      
      
      
    })
  }
  
  #slots########################################################################################
  
  w_s_j<-eventReactive(input$store_j,{
    x <-reactiveVal()
    
    shinyInput <- function(FUN, len, id, ...) {
      inputs <- character(len)
      for (i in seq_len(len)) {
        inputs[i] <- as.character(FUN(paste0(id, i), ...))
      }
      inputs
    }
    
    stores_schedule_j=get_query("shiny","select * from marketplace.stores_schedule")
    stores_schedule_j=stores_schedule_j[which(stores_schedule_j$store_id==vlookup(input$store_j,stores_schedule_j,"store_id","store")),]
    stores_schedule_j<-select(stores_schedule_j, "warehouse_id", "warehouse","slots")
    stores_schedule_j$editar=shinyInput(actionButton, nrow(stores_schedule_j),'button_', label = 'Editar',
                                        style="padding:8px; font-size:90%;color: #fff; background-color: #87ae7c; border-color: #87ae7c",
                                        onclick ='Shiny.setInputValue(\"select_button_slot_j\", this.id, 
                                        {priority: \"event\"})')
    

    for(i in 1:nrow(stores_schedule_j)){
      temp=stores_schedule_j$slots[i]
      temp=jsonlite::fromJSON(temp)
      temp <- do.call(rbind, temp)
      parameter=which(temp[,1]==1)
      temp=temp[parameter,]
      if(length(temp)>0){
      stores_schedule_j$slots[i]=paste(names(temp),collapse=", ")
      }else{
        stores_schedule_j$slots[i]="Sin Slots Autorizados"  
      }
    }
    colnames(stores_schedule_j)=c("Id","Bodega","Slots Autorizados","Editar")
    return(stores_schedule_j)
  })
  
 output$store_t_j <- DT::renderDataTable({
    
    data=w_s_j()
    DT::datatable(
      data[,2:ncol(data)],
      class = 'cell-border stripe',
      extensions = 'Buttons',
      options = list(dom='t',
                     pageLength = nrow(data),scrollX = T,scrollY = T),
      selection=list(mode="single", target="row"),
      rownames=FALSE,
      filter = 'top',escape = FALSE,style = 'bootstrap4')%>%
      formatStyle(columns = 2, fontSize = '120%')%>%
      formatStyle(1,color = 'black', backgroundColor = '#EED4F5',fontSize = '120%', fontWeight = 'bold')%>%
      formatStyle(ncol(data),color = 'black',fontSize = '180%')
    
  })    
 # #boton editar, muestra el modal del slot a editar
 observeEvent(input$select_button_slot_j,{
   
   result <-w_s_j()
   selectedRow <- as.numeric(strsplit(input$select_button_slot_j,"_")[[1]][2])
   warehouse_id=result[selectedRow,1]
   warehouse_id<<-warehouse_id

   showModal(modal_edit_slot(input,output))
   
 })
 # Boton regresar del modal editar
 observeEvent(input$exit_modal_dos,{
   w_s_j<-eventReactive(input$store_j,{
     x <-reactiveVal()
     
     shinyInput <- function(FUN, len, id, ...) {
       inputs <- character(len)
       for (i in seq_len(len)) {
         inputs[i] <- as.character(FUN(paste0(id, i), ...))
       }
       inputs
     }
     
     stores_schedule_j=get_query("shiny","select * from marketplace.stores_schedule")
     stores_schedule_j=stores_schedule_j[which(stores_schedule_j$store_id==vlookup(input$store_j,stores_schedule_j,"store_id","store")),]
     stores_schedule_j<-select(stores_schedule_j, "warehouse_id", "warehouse","slots")
     stores_schedule_j$editar=shinyInput(actionButton, nrow(stores_schedule_j),'button_', label = 'Editar',
                                         style="padding:8px; font-size:90%;color: #fff; background-color: #87ae7c; border-color: #87ae7c",
                                         onclick ='Shiny.setInputValue(\"select_button_slot_j\", this.id, 
                                        {priority: \"event\"})')
     
     
     for(i in 1:nrow(stores_schedule_j)){
       temp=stores_schedule_j$slots[i]
       temp=jsonlite::fromJSON(temp)
       temp <- do.call(rbind, temp)
       parameter=which(temp[,1]==1)
       temp=temp[parameter,]
       if(length(temp)>0){
         stores_schedule_j$slots[i]=paste(names(temp),collapse=", ")
       }else{
         stores_schedule_j$slots[i]="Sin Slots Autorizados"  
       }
     }
     colnames(stores_schedule_j)=c("Id","Bodega","Slots Autorizados","Editar")
     return(stores_schedule_j)
   })
   
   output$store_t_j <- DT::renderDataTable({
     
     data=w_s_j()
     DT::datatable(
       data[,2:ncol(data)],
       class = 'cell-border stripe',
       extensions = 'Buttons',
       options = list(dom ='t',
                      pageLength = nrow(data),scrollX = T,scrollY = T),
       selection=list(mode="single", target="row"),
       rownames=FALSE,
       filter = 'top',escape = FALSE,style = 'bootstrap4')%>%
       formatStyle(columns = 2, fontSize = '120%')%>%
       formatStyle(1,color = 'black', backgroundColor = '#EED4F5',fontSize = '120%', fontWeight = 'bold')%>%
       formatStyle(ncol(data),color = 'black',fontSize = '180%')
     
   })  
   removeModal()
   })
 #Boton Guardar edicion de slot
 observeEvent(input$save_slot,{
  
   for(i in 1:9){
   parameter=input[[paste0("slots_", (i))]]
   parameter=if_else(parameter==T,1,0)
   assign(paste0("slots_",i),parameter)
   }
   
   
   json_slots=paste0('{"15 min":',slots_1,',"30 min":',slots_2,',"45 min":',slots_3,',"60 min":',slots_4,',"90 min":',slots_5,',"120 min":',slots_6,',"2.5 horas":',slots_7,',"180 min":',slots_8,',"4 horas":',slots_9,'}')
   
     {
       qry_update_dos=paste0("UPDATE marketplace.stores_schedule
    SET 
    slots='",json_slots,"'
    WHERE
    warehouse_id='",warehouse_id,"';")
       get_query("shiny",qry_update_dos)

       showModal(modal_usuario9(input,output)) 
       
     }
     
   })
   
 

  
 session$onSessionEnded(function() {
    stopApp()
  })
  
  
}


shinyApp(ui = ui, server = server)

