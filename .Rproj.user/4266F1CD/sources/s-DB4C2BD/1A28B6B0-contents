
library(bs4Dash)
library(DBI)
library(RMySQL)
library(plyr)
library(dplyr)
library(shiny)
library(DT)
library(glue)
library(expss)
library(shinyWidgets)
library(shinyjs)
library(stringr)
library(shinybusy)
library(lubridate)
library(maditr)
library(stringdist)
library(expss)
library(plotly)
library(readxl)

#función

#
'%ni%'=Negate('%in%')

{
  

  


}

ui = {bs4DashPage(
  #old_school = F,
  #navbar = bs4DashNavbar(),
  dashboardHeader(
    title = ""
  ),
  sidebar = bs4DashSidebar(
    skin = "light",
    bs4SidebarMenu(
      bs4SidebarHeader("DonRep Prueba Técnica"),
      bs4SidebarMenuItem(
        "Pregunta 1",
        tabName = "opc2"
      ),
      bs4SidebarMenuItem(
        "Pregunta 2",
        tabName = "opc3"
      ),
      bs4SidebarMenu(
        bs4SidebarMenuItem(
          "Pregunta 3",
          tabName = "opc4"
        )
      ),
      knobInput(
        inputId ="pareto_cut",
        value = 30,
        label="Seleccione el punto de corte en porcentaje:",
        min =1,
        max=100,
        lineCap = "round",
        fgColor = "#d0006f",
        inputColor = "#d0006f"
      )
    )
  ),
  
  footer = bs4DashFooter(),
  title = "DonRep Prueba Técnica",
  body = bs4DashBody(
    bs4TabItems(
      
      bs4TabItem(
        tabName = "opc2",
        h4("Decisión de Compra basado en No. Cotizaciones"),

                 actionButton(
                   'button1',
                   'Generar',
                   class = "btn btn-primary",
                   style = "color: white;background-color: #a17cae !important; border: 2;
            font-weight: bold; margin:20px; padding: 6px;border-color: #a17cae"
                 ),

fluidRow(
        bs4Card(
          title = "Tabla de Frecuencias",
          width = 5,
          closable = FALSE,
          maximizable = TRUE,
          collapsible = FALSE,
          dataTableOutput("quoutes_table")
        ),
        bs4Card(
          title = "Tabla de Frecuencias",
          width = 5,
          closable = FALSE,
          maximizable = TRUE,
          collapsible = FALSE,
          plotlyOutput("graph1")
        )
)
),
      bs4TabItem(
        tabName = "opc3",
        h4("Repuestos a Comprar:"),
        br(),
      
        fluidRow(
          bs4Card(
            title = "Frecuencia de Compra (Mes a mes)",
            width = 6,
            closable = FALSE,
            maximizable = TRUE,
            collapsible = FALSE,
            dataTableOutput("churn_table")
          ),
          bs4Card(
            title = "Repuestos a importar",
            width = 6,
            closable = FALSE,
            maximizable = TRUE,
            collapsible = FALSE,
            dataTableOutput("top_result")
          )
        )
        
      ),
      bs4TabItem(
        tabName = "opc4",
        h4("Transporte y Churn"),
        actionButton(
          'button2',
          'Generar',
          class = "btn btn-primary",
          style = "color: white;background-color: #a17cae !important; border: 2;
            font-weight: bold; margin:20px; padding: 6px;border-color: #a17cae"
        ),
        
        fluidRow(
          bs4Card(
            title = "Modelos de Transporte",
            width = 12,
            closable = FALSE,
            maximizable = TRUE,
            collapsible = FALSE,
            dataTableOutput("t_frequency")
          ),
          bs4Card(
            title = "Puntaje con Modelo de Transporte 1",
            width = 6,
            closable = FALSE,
            maximizable = TRUE,
            collapsible = FALSE,
            plotlyOutput("graph2")
          ),
          bs4Card(
            title = "Puntaje con Modelo de Transporte 2",
            width = 6,
            closable = FALSE,
            maximizable = TRUE,
            collapsible = FALSE,
            plotlyOutput("graph3")
          )
        ),
        fluidRow(
          column(6,
          h4("Resumen Modelo 1"),
          verbatimTextOutput("summary1")
          ),
          column(6,
            h4("Resumen Modelo 2"),
            verbatimTextOutput("summary2")
          )
        )
        
      )
    )
  )
)}


parameter<<-1

server = function(input, output,session){
  
  
  
  #Horario de Tiendas
  {

    

    options(shiny.maxRequestSize=30*1024^2)
    
    w_s<-eventReactive(input$button1,{

      show_modal_spinner(
        spin = "radar",
        color = "#DC5BBF",
        text = "Procesando...",
        session = shiny::getDefaultReactiveDomain()
      )
      
      quoutes={"select 
q.order_id,
count(DISTINCT q.id)quantity,
o.delivered

from donrep.quotes q
inner join donrep.orders o on o.id=q.order_id

where q.sent=1
group by o.id
order by count(DISTINCT q.id) desc"}
      quoutes=get_query(quoutes)
      quoutes$quote_string=ifelse(quoutes$quantity>3,"Mayor a 3",(quoutes$quantity))
      
      quoutes=dcast(quoutes,quantity+quote_string~delivered,length)
      
      parameter=which(grepl("Mayor",quoutes$quote_string))
      if(length(parameter)>0){
        plus=quoutes[parameter,]
        param=colSums(plus[,3:ncol(plus)])
        plus=plus[1,]
        plus[1,3]=as.numeric(param[1])
        plus[1,4]=as.numeric(param[2])
        quoutes=quoutes[-parameter,]
        quoutes=rbind(quoutes,plus)
      }
      remove_modal_spinner(session = getDefaultReactiveDomain())
      return(quoutes)
    })
    
    output$quoutes_table <- DT::renderDataTable(server=F,{
        {
          df=w_s()
          df=df[,2:ncol(df)]
          colnames(df)=c("Freq. Cotizaciones","Pedidos Cancelados","Pedidos Entregados")
          DT::datatable(df,class = 'cell-border stripe',
                        options = list(dom='t',info=FALSE,autoWidth = F,
                                       lengthChange = T,paging = FALSE,
                                       pageLength = nrow(df),scrollX = F),
                        selection=list(mode="single", target="row"),
                        rownames =FALSE,
                        filter = 'none',escape = FALSE,editable = FALSE)
        }
      })
    output$graph1<-renderPlotly({
      quoutes=w_s()
      fig1 <- plot_ly(x = quoutes$quantity, y = quoutes$`0`, type = 'scatter',line=list(color="red"),mode = 'lines+markers',marker = list(color = 'red'),name = 'Sin Venta')%>%
        add_trace(x = quoutes$quantity, y =quoutes$`1`, type = 'scatter',line=list(color="blue"), mode = 'lines+markers',marker = list(color = 'blue'),name = 'Venta Exitosa')%>%
        layout( plot_bgcolor = "#e5ecf6", xaxis = list(title = 'No. de Cotizaciones'), 
                yaxis = list(title = 'No. de Ordenes'))%>%layout(legend = list(x = 0.6, y = 0.9,bgcolor = "#e5ecf6"))
      
      
    fig1
    })
    observeEvent(input$pareto_cut,{

      show_modal_spinner(
        spin = "radar",
        color = "#DC5BBF",
        text = "Procesando...",
        session = shiny::getDefaultReactiveDomain()
      )
      
      sales={get_query("SELECT
o.customer_id,
upper(c.name)customer_name,
count(DISTINCT o.id)Pedidos,
month(o.created_at)Mes
from donrep.orders o 
inner join donrep.customers c on c.id=o.customer_id
where o.delivered=1
group by o.customer_id,month(o.created_at)")}
      bin=(dcast(sales,customer_id~Mes,length))
      bin_df=data.frame(bin[,2:ncol(bin)])
      i=0
      while(i<ncol(bin_df)){
        parameter=which(bin_df[,ncol(bin_df)-i]==0)
        bin_df[parameter,ncol(bin_df)-i]=-1
        i=i+1
      }
      
      for(i in 1:nrow(bin_df)){
        parameter=min(which(bin_df[i,]==1))
        if(parameter!=1){
          parameter=parameter-1
          parameter=1:parameter
          for(j in parameter){
            bin_df[i,parameter]=0
          }
        }
      }
      
      bin_df=cbind(bin$customer_id,bin_df)
      colnames(bin_df)=colnames(bin)
      bin_df$result=rowSums(bin_df[2:ncol(bin_df)])
      bin_df=bin_df[order(-bin_df$result),]
      bin_df=bin_df[which(bin_df$result>0),]
      bin_df$percentage=bin_df$result/sum(bin_df$result)
      bin_df$cumsum=cumsum(bin_df$percentage)
      
      bin_df=bin_df[which(bin_df$cumsum<input$pareto_cut/100),]
      
      to_import=paste0("select op.product_name Nombre_producto,
sum(op.quantity)Cantidad,
UPPER(o.car_brand_clean)Marca

from donrep.orders o 
inner join donrep.order_product op on op.order_id=o.id
inner join donrep.quotes q on q.order_id=o.id
inner join donrep.quote_detail qd on qd.quote_id=q.id
where o.customer_id in (",paste(bin_df$customer_id,collapse=","),")
and qd.to_import=1
group by op.product_id")
      
      to_import=get_query(to_import)
      
      quantity=aggregate(to_import$Marca,list(to_import$Marca),length)
      quantity=quantity[order(-quantity[,2]),]
      unq=unique(quantity[,1])
      
      result=data.frame()
      for(i in 1:length(unq)){
        parameter=which(to_import$Marca==unq[i])
        temp=to_import[parameter,]
        temp=data.frame("Marca"=unq[i],"Productos"=paste(temp$Nombre_producto,collapse=", "))
        result=rbind(result,temp)
      }
      output$churn_table <- DT::renderDataTable(server=F,{
        df=bin_df[,-ncol(bin_df)]
        df$customer_id=vlookup(df$customer_id,sales,"customer_name","customer_id")
        to_assign=df[,2:6]
        to_assign=ifelse(to_assign==-1,"No",ifelse(to_assign==0,"","Si"))
        df=data.frame("Cliente"=df$customer_id,to_assign,"Puntaje"=df$result)
        colnames(df)=c("Cliente","2","3","4","5","6","Puntaje")
        
        DT::datatable(df,
                      class = 'cell-border stripe',
                      rownames=FALSE,
                      extensions = list("Scroller"),
                      options=list(dom='t',info=FALSE,autoWidth = FALSE,ordering=F,columnDefs = list(list(className = 'dt-center', targets = 0:(ncol(df)-1))), 
                                   lengthChange = FALSE,sScrollY = '45vh', scrollCollapse = TRUE,pageLength = nrow(df),scrollX = T),
                      selection=list(mode="single", target="row"),
                      filter = 'none',escape = FALSE)%>%
          formatStyle(columns = c(2:ncol(df)), fontSize = '80%')%>%
          formatStyle(1,color = 'black', backgroundColor = '#EEEDF3',fontSize = '90%', fontWeight = 'bold')%>%
          formatStyle(ncol(df),color = 'black',fontSize = '80%')%>%
        formatStyle(
          2:6,
          fontWeight = 'bold',
          backgroundColor = styleEqual(c("Si", "No"), c('#DBF7D0', '#F7D8D0'))
        )

        
        
      })    
      output$top_result <- DT::renderDataTable(server=F,{
        df=result
        colnames(df)=c("Marca","Productos")

        
        DT::datatable(df,
                      class = 'cell-border stripe',
                      rownames=FALSE,
                      extensions = list("Scroller"),
                      options=list(dom='t',info=FALSE,autoWidth = FALSE,ordering=F,columnDefs = list(list(className = 'dt-center', targets = 0:(ncol(df)-1))), 
                                   lengthChange = FALSE,sScrollY = '45vh', scrollCollapse = TRUE,pageLength = nrow(df),scrollX = T),
                      selection=list(mode="single", target="row"),
                      filter = 'none',escape = FALSE)%>%
          formatStyle(columns = c(2:ncol(df)), fontSize = '60%')%>%
          formatStyle(1,color = 'black', backgroundColor = '#EEEDF3',fontSize = '90%', fontWeight = 'bold')

        
        
      })    
      
      remove_modal_spinner(session = getDefaultReactiveDomain())
    })
    
    observeEvent(input$button2,{
      show_modal_spinner(
        spin = "radar",
        color = "#DC5BBF",
        text = "Procesando...",
        session = shiny::getDefaultReactiveDomain()
      )
      
      courier_frequency={"select 
UPPER(d.transporter_name) transportador,
count(distinct o.id)pedidos

from donrep.orders o
inner join donrep.deliveries d on d.order_id=o.id


GROUP by UPPER(d.transporter_name)"}
      
      courier_frequency=get_query(courier_frequency)
      
      courier_frequency=courier_frequency[which(courier_frequency$transportador %ni% c("0.0","9.5995995E7","DEVOLUCION","NULL")),]
      courier_frequency=courier_frequency[order(-courier_frequency$pedidos),]
      
      for(i in 1:nrow(courier_frequency)){
        parameter=stringdist(courier_frequency$transportador[i],courier_frequency$transportador,"lv")
        parameter=which(parameter<=3)
        courier_frequency$transportador[parameter]=courier_frequency$transportador[i]
      }
      
      courier_frequency=aggregate(courier_frequency$pedidos,list(courier_frequency$transportador),sum)
      colnames(courier_frequency)=c("transportador","orders")
      courier_frequency=courier_frequency[order(-courier_frequency$orders),]
      
      courier_category <- read_excel("courier_category.xlsx")
      
      courier_frequency$category=vlookup(courier_frequency$transportador,courier_category,2,1)
      
      
      sales={get_query("SELECT
o.customer_id,
c.name,
count(DISTINCT o.id)Pedidos,
month(o.created_at)Mes
from donrep.orders o 
inner join donrep.deliveries d on d.order_id=o.id
inner join donrep.customers c on c.id=o.customer_id
where o.delivered=1
group by o.customer_id,month(o.created_at)")}
      
      bin=(dcast(sales,customer_id~Mes,length))
      bin_df=data.frame(bin[,2:ncol(bin)])
      i=0
      while(i<ncol(bin_df)){
        parameter=which(bin_df[,ncol(bin_df)-i]==0)
        bin_df[parameter,ncol(bin_df)-i]=-1
        i=i+1
      }
      
      for(i in 1:nrow(bin_df)){
        parameter=min(which(bin_df[i,]==1))
        if(parameter!=1){
          parameter=parameter-1
          parameter=1:parameter
          for(j in parameter){
            bin_df[i,parameter]=0
          }
        }
      }
      
      bin_df=cbind(bin$customer_id,bin_df)
      colnames(bin_df)=colnames(bin)
      
      bin_df$result=rowSums(bin_df[2:ncol(bin_df)])
      bin_df=bin_df[order(-bin_df$result),]
      
      courier_churn={paste0("select 
o.customer_id,
UPPER(d.transporter_name) transportador,
count(distinct o.id)pedidos

from donrep.orders o
inner join donrep.deliveries d on d.order_id=o.id
where o.delivered=1
and o.customer_id in(",paste(bin_df$customer_id,collapse=","),")
GROUP by o.customer_id,UPPER(d.transporter_name) ")}
      
      courier_churn=get_query(courier_churn)
      
      courier_churn=courier_churn[which(courier_churn$transportador %ni% c("0.0","9.5995995E7","DEVOLUCION","NULL")),]
      
      for(i in 1:nrow(courier_churn)){
        parameter=stringdist(courier_category$transportador[i],courier_churn$transportador,"lv")
        parameter=which(parameter<=3)
        courier_churn$transportador[parameter]=courier_category$transportador[i]
      }
      
      courier_churn$categoria=vlookup(courier_churn$transportador,courier_category,2,1)
      
      courier_churn=dcast(courier_churn,customer_id~categoria,sum)
      courier_churn$prefered=""
      for(i in 1:nrow(courier_churn)){
        courier_churn$prefered[i]=names(which.max(courier_churn[i,2:3]))
      }
      
      bin_df$prefered=vlookup(bin_df$customer_id,courier_churn,"prefered","customer_id")
      bin_df=bin_df[which(is.na(bin_df$prefered)==F),]

      group_1=bin_df[which(bin_df$prefered==1),]
      group_2=bin_df[which(bin_df$prefered==2),]
      
      
      
      
      output$graph2<-renderPlotly({
        fig1 <- plot_ly(x=as.character(group_1$result), histfunc='sum', type = "histogram")%>% layout(yaxis=list(type='linear'))
        fig1
      })
      
      output$graph3<-renderPlotly({
        fig2 <- plot_ly(x=as.character(group_2$result), histfunc='sum', type = "histogram")%>% layout(yaxis=list(type='linear'))
        fig2
      })
      
      transporters_frequency=rbind(data.frame("Grupo"=1,"Transportadores"=paste(courier_frequency[which(courier_frequency$category==1),]$transportador,collapse=", "),"Ordenes"=sum(courier_frequency[which(courier_frequency$category==1),]$orders))
                                   ,data.frame("Grupo"=2,"Transportadores"=paste(courier_frequency[which(courier_frequency$category==2),]$transportador,collapse=", "),"Ordenes"=sum(courier_frequency[which(courier_frequency$category==2),]$orders)))
      
      
      output$t_frequency <- DT::renderDataTable(server=F,{
        df=transporters_frequency
        
        DT::datatable(df,
                      class = 'cell-border stripe',
                      rownames=FALSE,
                      extensions = list("Scroller"),
                      options=list(dom='t',info=FALSE,autoWidth = FALSE,ordering=F,columnDefs = list(list(className = 'dt-center', targets = 0:(ncol(df)-1))), 
                                   lengthChange = FALSE,sScrollY = '45vh', scrollCollapse = TRUE,pageLength = nrow(df),scrollX = T),
                      selection=list(mode="single", target="row"),
                      filter = 'none',escape = FALSE)%>%
          formatStyle(columns = c(2:ncol(df)), fontSize = '110%')%>%
          formatStyle(1,color = 'black', backgroundColor = '#EEEDF3',fontSize = '120%', fontWeight = 'bold')
        
        
        
      })    
      
      output$summary1 <- renderPrint(summary(group_1$result))
      output$summary2 <- renderPrint(summary(group_2$result))
      
      remove_modal_spinner(session = getDefaultReactiveDomain())
    })
    
    
    
   
  }
  
  
  
}


shinyApp(ui = ui, server = server)

