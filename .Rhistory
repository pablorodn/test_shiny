encode = "json")
request <- GET("http://54.159.47.24:8000/",
query = list(n = query),
encode = "json")
request$url
request <- GET("http://54.159.47.24:8000/",
query = list(echo = query),
encode = "json")
request$url
request <- GET("http://54.159.47.24:8000/",
query =  query,
encode = "json")
??GET
a=GET("http://google.com/", path = "search", query = list(q = "ham"))
a$url
request <- GET("http://54.159.47.24:8000/",
path="echo"
encode = "json")
request <- GET("http://54.159.47.24:8000/",
path="echo",
encode = "json")
request
request$url
request <- GET("http://54.159.47.24:8000/",
path="echo?n",query = list(query = query),
encode = "json")
request$url
request <- GET("http://54.159.47.24:8000/",
path="echo?n",query = list(query),
encode = "json")
request <- GET("http://54.159.47.24:8000/",
path="?n",query = list(echo=query),
encode = "json")
request$url
http://54.159.47.24:8000/echo?n=select%20DISTINCT%20po.vernacularName%20from%20ab.poland_occurence%20po%20%20where%20po.vernacularName%20is%20not%20null
request <- GET("http://54.159.47.24:8000/",
path="n",query = list(echo=query),
encode = "json")
request$url
request <- GET("http://54.159.47.24:8000/",
path="?",query = list(echo=query),
encode = "json")
http://54.159.47.24:8000/echo?n=select%20DISTINCT%20po.vernacularName%20from%20ab.poland_occurence%20po%20%20where%20po.vernacularName%20is%20not%20null
request$url
request <- GET("http://54.159.47.24:8000/",
path="",query = list(echo=query),
encode = "json")
request$url
request <- GET("http://54.159.47.24:8000/",
path="",query = list(query),
encode = "json")
m=GET("http://google.com/", path = "search", query = list(q = "ham"))
m$url
r="http://54.159.47.24:8000/echo?n=select%20DISTINCT%20po.vernacularName%20from%20ab.poland_occurence%20po%20%20where%20po.vernacularName%20is%20not%20null"
request <- GET("http://54.159.47.24:8000/",
,query = list(echo=query),
encode = "json")
request$url
list(echo=query)
request <- GET("http://54.159.47.24:8000/",
path="?",query = list(echo=query),
encode = "json")
request$url
request <- GET("http://54.159.47.24:8000/",
,query = list(n=query),
encode = "json")
request$url
request <- GET("http://54.159.47.24:8000/echo",
,query = list(n=query),
encode = "json")
request$url
data <- content(request, as = 'text', encoding = 'UTF-8')
result <- as.data.frame(fromJSON(data))
View(result)
shiny::runApp()
runApp()
runApp()
install.packages("testthat")
install.packages("testthat")
library(shinytest)
library(testthat)
context("Test Shiny app")
# open Shiny app and PhantomJS
app <- ShinyDriver$new("app.R")
install.packages("shinytest")
library(shinytest)
library(testthat)
context("Test Shiny app")
context
app <- ShinyDriver$new("app.R")
test_that("output is correct", {
# set num_input to 30
app$setInputs(num_input = 30)
# get text_out
output <- app$getValue(name = "text_out")
# test
expect_equal(output, "The square of the number n is: nÂ² = 900")
})
source(file = glue("{getwd()}/config.R"), local=TRUE)
'%ni%'=Negate('%in%')
library(shiny)
library(bs4Dash)
library(glue)
source(file = glue("{getwd()}/config.R"), local=TRUE)
'%ni%'=Negate('%in%')
library(shiny)
library(bs4Dash)
library(glue)
source(file = glue("{getwd()}/get_query.R"), local=TRUE)
'%ni%'=Negate('%in%')
get_query()
get_query("select DISTINCT po.vernacularName
from ab.poland_occurence po
where po.vernacularName is not null")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
occurence=readr::read_csv_chunked('biodiversity-data/occurence.csv')
occurence=readr::read_csv_chunked('occurence.csv')
occurence=readr::read_csv('occurence.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(bs4Dash)
library(glue)
library(httr)
library(jsonlite)
library(dplyr)
source(file = glue("{getwd()}/get_query.R"), local=TRUE)
'%ni%'=Negate('%in%')
ui = {dashboardPage(
title = "Basic Dashboard",
fullscreen = TRUE,
header = dashboardHeader(
title = dashboardBrand(
title = "bs4Dash",
color = "primary",
href = "https://www.google.fr",
image = "https://adminlte.io/themes/AdminLTE/dist/img/user2-160x160.jpg",
),
skin = "light",
status = "white",
border = TRUE,
sidebarIcon = icon("bars"),
controlbarIcon = icon("th"),
fixed = FALSE,
leftUi = tagList(
dropdownMenu(
badgeStatus = "info",
type = "notifications",
notificationItem(
inputId = "triggerAction2",
text = "Error!",
status = "danger"
)
),
dropdownMenu(
badgeStatus = "info",
type = "tasks",
taskItem(
inputId = "triggerAction3",
text = "My progress",
color = "orange",
value = 10
)
)
),
rightUi = dropdownMenu(
badgeStatus = "danger",
type = "messages",
messageItem(
inputId = "triggerAction1",
message = "message 1",
from = "Divad Nojnarg",
image = "https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg",
time = "today",
color = "lime"
)
)
),
sidebar = dashboardSidebar(
skin = "light",
status = "primary",
elevation = 3,
sidebarUserPanel(
image = "https://image.flaticon.com/icons/svg/1149/1149168.svg",
name = "Welcome Onboard!"
),
sidebarMenu(
sidebarHeader("Header 1"),
menuItem(
"Item 1",
tabName = "item1"
),
menuItem(
"Item 2",
tabName = "item2"
)
)
),
controlbar = dashboardControlbar(
skin = "light",
pinned = TRUE,
collapsed = FALSE,
overlay = FALSE,
controlbarMenu(
id = "controlbarmenu",
controlbarItem(
title = "Item 1",
sliderInput(
inputId = "obs",
label = "Number of observations:",
min = 0,
max = 1000,
value = 500
),
column(
width = 12,
align = "center",
radioButtons(
inputId = "dist",
label = "Distribution type:",
c(
"Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp"
)
)
)
),
controlbarItem(
"Item 2",
"Simple text"
)
)
),
footer = dashboardFooter(
left = a(
href = "https://twitter.com/divadnojnarg",
target = "_blank", "@DivadNojnarg"
),
right = "2018"
),
body = dashboardBody(
tabItems(
tabItem(
tabName = "item1",
fluidRow(
lapply(1:3, FUN = function(i) {
sortable(
width = 4,
p(class = "text-center", paste("Column", i)),
lapply(1:2, FUN = function(j) {
box(
title = paste0("I am the ", j, "-th card of the ", i, "-th column"),
width = 12,
"Click on my header"
)
})
)
})
)
),
tabItem(
tabName = "item2",
box(
title = "Card with messages",
width = 9,
userMessages(
width = 12,
status = "success",
userMessage(
author = "Alexander Pierce",
date = "20 Jan 2:00 pm",
image = "https://adminlte.io/themes/AdminLTE/dist/img/user1-128x128.jpg",
type = "received",
"Is this template really for free? That's unbelievable!"
),
userMessage(
author = "Dana Pierce",
date = "21 Jan 4:00 pm",
image = "https://adminlte.io/themes/AdminLTE/dist/img/user5-128x128.jpg",
type = "sent",
"Indeed, that's unbelievable!"
)
)
)
)
)
)
)}
server = function(input, output) {}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(DBI)
library(RMySQL)
library(readr)
library(safer)
codifier="Ax200"
'%ni%'=Negate('%in%')
#Connect to test db
con=dbConnect(
RMySQL::MySQL(),
host = "database-1.ckd1e3sk7dwp.us-east-1.rds.amazonaws.com",
user = "admin",
password =decrypt_string("hUtjYeT9C5cSg9LAEuXhreKc1x/m+A0E8A==",codifier),
dbname="ab"
)
multimedia <- read_csv("biodiversity-data/multimedia.csv")
#Read only the Poland occurences
library(readr)
df1 <- read_csv("~/Downloads/biodiversity-data/occurence_0_row_1000000_b790643b-d1cd-4903-8ac4-4acc76c4012d.csv")
??dbWriteTable
#Write on db
dbWriteTable(con,"chunk_occurence",chunk_occurence,row.names = FALSE,append=T)
dbWriteTable(con,"chunk_occurence",df1,row.names = FALSE,append=T)
list=list.files("/Users/pablorodriguez/Downloads/biodiversity-data/")
list
list=list(list.files("/Users/pablorodriguez/Downloads/biodiversity-data/"))
list
list=list.files("/Users/pablorodriguez/Downloads/biodiversity-data/")
list[1]
list=list[1]
lapply(list,dbWriteTable,con,"chunk_occurence",row.names = FALSE,append=T)
df1
list
list=list.files("/Users/pablorodriguez/Downloads/biodiversity-data/")
list[1]
library(DBI)
library(RMySQL)
library(readr)
library(safer)
library(glue)
i=1
df1=read_csv(paste0("/Users/pablorodriguez/Downloads/biodiversity-data/",list[i]))
df1
dbWriteTable(con,"chunked_occurence",df1,row.names = FALSE,append=T)
#Connect to test db
con=dbConnect(
RMySQL::MySQL(),
host = "database-1.ckd1e3sk7dwp.us-east-1.rds.amazonaws.com",
user = "admin",
password =decrypt_string("hUtjYeT9C5cSg9LAEuXhreKc1x/m+A0E8A==",codifier),
dbname="ab"
)
dbWriteTable(con,"chunked_occurence",df1,row.names = FALSE,append=T)
multimedia <- read_csv("multimedia.csv")
parameter=which(multimedia$CoreId %in% df1$id)
list=list.files("/Users/pablorodriguez/Downloads/biodiversity-data/")
list
list(order[list])
list[order[list]]
list[order(list)]
list=list.files("/Users/pablorodriguez/Downloads/biodiversity-data/")
con=dbConnect(
RMySQL::MySQL(),
host = "database-1.ckd1e3sk7dwp.us-east-1.rds.amazonaws.com",
user = "admin",
password =decrypt_string("hUtjYeT9C5cSg9LAEuXhreKc1x/m+A0E8A==",codifier),
dbname="ab"
)
#Write on db
temp_m=data.frame()
for(i in 1:length(list)){
df1=read_csv(paste0("/Users/pablorodriguez/Downloads/biodiversity-data/",list[i]))
dbWriteTable(con,"chunked_occurence",df1,row.names = FALSE,append=T)
parameter=which(multimedia$CoreId %in% df1$id)
temp=multimedia[parameter,]
temp_m=rbind(temp_m,temp)
}
write_csv(temp_m,"chunked_multimedia.csv")
View(temp_m)
dbWriteTable(con,"chunked_multimedia",temp_m,row.names = FALSE,append=T)
View(temp)
shiny::runApp()
runApp()
list=list.files("/Users/pablorodriguez/Downloads/biodiversity-data/")
#Write on db
temp_m=data.frame()
i=1
df1=read_csv(paste0("/Users/pablorodriguez/Downloads/biodiversity-data/",list[i]))
View(df1)
#Write on db
temp_m=data.frame()
for(i in 1:11){
df1=read_csv(paste0("/Users/pablorodriguez/Downloads/biodiversity-data/",list[i]))
df1=df1[,-1]
dbWriteTable(con,"chunked_occurence",df1,row.names = FALSE,append=T)
#Find the multimedia ids on dataset_occurence
#parameter=which(multimedia$CoreId %in% df1$id)
#temp=multimedia[parameter,]
#temp_m=rbind(temp_m,temp)
}
warnings()
df1$id
runApp()
shiny::runApp()
library(DBI)
library(RMySQL)
library(readr)
library(safer)
library(glue)
codifier="Ax200"
'%ni%'=Negate('%in%')
#Connect to test db
con=dbConnect(
RMySQL::MySQL(),
host = "database-1.ckd1e3sk7dwp.us-east-1.rds.amazonaws.com",
user = "admin",
password =decrypt_string("hUtjYeT9C5cSg9LAEuXhreKc1x/m+A0E8A==",codifier),
dbname="ab"
)
multimedia <- read_csv("multimedia.csv")
#Read only the first 4 million of occurrences
list=list.files("/Users/pablorodriguez/Downloads/biodiversity-data/")
#Write on db
temp_m=data.frame()
for(i in 1:6){
df1=read_csv(paste0("/Users/pablorodriguez/Downloads/biodiversity-data/",list[i]))
df1=df1[,-1]
dbWriteTable(con,"chunked_occurence",df1,row.names = FALSE,append=T)
#Find the multimedia ids on dataset_occurence
#parameter=which(multimedia$CoreId %in% df1$id)
#temp=multimedia[parameter,]
#temp_m=rbind(temp_m,temp)
}
for(i in 1:6){
df1=read_csv(paste0("/Users/pablorodriguez/Downloads/biodiversity-data/",list[i]))
df1=df1[,-1]
dbWriteTable(con,"chunked_occurence",df1,row.names = FALSE,append=T)
#Find the multimedia ids on dataset_occurence
#parameter=which(multimedia$CoreId %in% df1$id)
#temp=multimedia[parameter,]
#temp_m=rbind(temp_m,temp)
}
shiny::runApp()
runApp()
runApp()
data
runApp()
runApp()
data_selected
parameter=data_selected$accessURI[is.na(data_selected$accessURI)==F]
parameter
sample(1:length(parameter),1)
parameter[sample(1:length(parameter),1)]
parameter[sample(1:length(parameter),1)]
parameter[sample(1:length(parameter),1)]
parameter[sample(1:length(parameter),1)]
parameter[sample(1:length(parameter),1)]
parameter[sample(1:length(parameter),1)]
parameter[sample(1:length(parameter),1)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
